package com._520it.crm.web.controller;

import com._520it.crm.domain.Role;
import com._520it.crm.page.AjaxResult;
import com._520it.crm.page.PageResult;
import com._520it.crm.query.RoleQueryObject;
import com._520it.crm.service.IRoleService;
import com._520it.crm.util.RequiredPermission;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;

/**
 * Created by Administrator on 2016/9/15.
 */
@Controller
public class RoleController extends BaseController {

    @Autowired
    private IRoleService roleService;

    @RequestMapping("/role")
    public String ndex() {
        return "role";
    }

    @RequiredPermission("角色查询")
    @RequestMapping("/role_list")
    @ResponseBody
    public PageResult list(RoleQueryObject qo) {
        PageResult result = null;
        result = roleService.queryByCondition(qo);

        return result;
    }

    @RequestMapping("/role_queryRoleByEmp")
    @ResponseBody
    public List<Role> list() {
        List<Role> roles = roleService.listAll();
        return roles;
    }


    @RequestMapping("/permission_queryByRid")
    @ResponseBody
    public PageResult getPermissionByRid(Long rid) {
        PageResult result = null;
        result = roleService.queryByRid(rid);

        return result;
    }

    @RequestMapping("/role_save")
    @ResponseBody
    public AjaxResult save(Role role) {
        AjaxResult result = null;
        try {
            int effectCount = roleService.save(role);
            if (effectCount > 0) {
                result = new AjaxResult(true, "保存成功");
            } else {
                result = new AjaxResult("保存失败");

            }
        } catch (Exception e) {
            e.printStackTrace();
            result = new AjaxResult("保存异常");
        }

        return result;

    }

    @RequestMapping("/role_update")
    @ResponseBody
    public AjaxResult update(Role role) {
        AjaxResult result = null;
        try {
            int effectCount = roleService.update(role);
            if (effectCount > 0) {
                result = new AjaxResult(true, "更新成功");
            } else {
                result = new AjaxResult("更新失败");

            }
        } catch (Exception e) {
            e.printStackTrace();
            result = new AjaxResult("更新异常");
        }

        return result;

    }

    @RequestMapping("/role_delete")
    @ResponseBody
    public AjaxResult delete(Long id) {
        AjaxResult result = null;
        try {
            int effectCount = roleService.delete(id);
            if (effectCount > 0) {
                result = new AjaxResult(true, "删除成功");
            } else {
                result = new AjaxResult("删除失败");

            }
        } catch (Exception e) {
            e.printStackTrace();
            result = new AjaxResult("删除异常");
        }

        return result;

    }

}
